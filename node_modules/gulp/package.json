{
  "name": "gulp",
  "description": "The streaming build system",
  "version": "3.2.4",
  "homepage": "http://github.com/wearefractal/gulp",
  "repository": {
    "type": "git",
    "url": "git://github.com/wearefractal/gulp.git"
  },
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "main": "./index.js",
  "tags": [
    "build",
    "stream",
    "system"
  ],
  "bin": {
    "gulp": "./bin/gulp.js"
  },
  "dependencies": {
    "event-stream": "~3.0.20",
    "glob-stream": "~3.1.2",
    "mkdirp": "~0.3.5",
    "optimist": "~0.6.0",
    "gulp-util": "~2.2.0",
    "orchestrator": "~0.3.0",
    "resolve": "~0.6.1",
    "semver": "~2.2.1",
    "findup-sync": "~0.1.2",
    "pretty-hrtime": "~0.2.0",
    "glob-watcher": "0.0.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "rimraf": "*",
    "q": "*",
    "jshint": "*"
  },
  "scripts": {
    "test": "mocha --reporter spec && jshint"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/wearefractal/gulp/raw/master/LICENSE"
    }
  ],
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"194\" width=\"98\" src=\"https://raw.github.com/gulpjs/artwork/master/gulp.png\"/>\n  </a>\n  <br/>\n  <a href=\"http://gulpjs.com/\">Visit our website!</a>\n  <br/>\n  <a href=\"http://teespring.com/gulp\">Grab a shirt!</a>\n</p>\n\n# gulp [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n> The streaming build system\n\n## Usage\n\n### 1. Install gulp globally:\n\n```\nnpm install -g gulp\n```\n\n### 2. Install gulp in your project devDependencies:\n\n```\nnpm install --save-dev gulp\n```\n\n### 3. Create a `gulpfile.js` at the root of your project:\n\nThis file is just an example of what yours might end up looking like. Check out [gulp init] for a jumping off point.\n\n```javascript\n/*\n  This is an EXAMPLE gulpfile.js\n  You'll want to change it to match your project.\n  Find plugins at https://npmjs.org/browse/keyword/gulpplugin\n*/\nvar gulp = require('gulp');\nvar uglify = require('gulp-uglify');\n\ngulp.task('scripts', function() {\n  // Minify and copy all JavaScript (except vendor scripts)\n  gulp.src(['client/js/**/*.js', '!client/js/vendor/**'])\n    .pipe(uglify())\n    .pipe(gulp.dest('build/js'));\n\n  // Copy vendor files\n  gulp.src('client/js/vendor/**')\n    .pipe(gulp.dest('build/js/vendor'));\n});\n\n// Copy all static assets\ngulp.task('copy', function() {\n  gulp.src('client/img/**')\n    .pipe(gulp.dest('build/img'));\n\n  gulp.src('client/css/**')\n    .pipe(gulp.dest('build/css'));\n\n  gulp.src('client/*.html')\n    .pipe(gulp.dest('build'));\n});\n\n// The default task (called when you run `gulp`)\ngulp.task('default', function() {\n  gulp.run('scripts', 'copy');\n\n  // Watch files and run tasks if they change\n  gulp.watch('client/js/**', function(event) {\n    gulp.run('scripts');\n  });\n\n  gulp.watch([\n    'client/img/**',\n    'client/css/**',\n    'client/*.html'\n  ], function(event) {\n    gulp.run('copy');\n  });\n});\n```\n\n### 4. Run gulp\n\n```\ngulp\n```\n\nThe default tasks will run and gulp will watch for changes.\n\nTo run individual tasks, use `gulp <task> <othertask>`\n\n\n## Available Plugins\n\nThe gulp community is growing, with new plugins being added daily. See the [npm search results][plugin search] for a complete list.\n\n\n## gulp API\n\n### gulp.src(globs[, options])\n\nTakes a glob and represents a file structure. Can be piped to plugins.\n\n```javascript\ngulp.src('./client/templates/*.jade')\n    .pipe(jade())\n    .pipe(minify())\n    .pipe(gulp.dest('./build/minified_templates'));\n```\n\n#### globs\nType: `String` or `Array`\n\nGlob or globs to read.\n\n#### options\nType: `Object`\n\nOptions to pass to [node-glob] through [glob-stream].\n\ngulp adds two additional options in addition to the [options supported by node-glob][node-glob documentation]:\n\n#### options.buffer\nType: `Boolean`\nDefault: `true`\n\nSetting this to `false` will return `file.contents` as a stream and not buffer files. This is useful when working with large files. **Note:** Plugins may not implement support for streams.\n\n#### options.read\nType: `Boolean`\nDefault: `true`\n\nSetting this to `false` will return `file.contents` as null and not read the file at all.\n\n\n### gulp.dest(path)\n\nCan be piped to and it will write files. Re-emits all data passed to it so you can pipe to multiple folders.\n\n```javascript\ngulp.src('./client/templates/*.jade')\n  .pipe(jade())\n  .pipe(gulp.dest('./build/templates'))\n  .pipe(minify())\n  .pipe(gulp.dest('./build/minified_templates'));\n```\n\n#### path\nType: `String`\n\nThe path (folder) to write files to.\n\n\n### gulp.task(name[, deps], fn)\n\nDefine a task using [Orchestrator].\n\n```javascript\ngulp.task('somename', function() {\n  // Do stuff\n});\n```\n\n#### name\n\nThe name of the task. Tasks that you want to run from the command line should not have spaces in them.\n\n#### deps\nType: `Array`\n\nAn array of tasks to be executed and completed before your task will run.\n\n```javascript\ngulp.task('mytask', ['array', 'of', 'task', 'names'], function() {\n  // Do stuff\n});\n```\n\n**Note:** If the dependencies are asynchronous it is not guaranteed that they will finish before `mytask` is executed. To ensure they are completely finished, you need to make sure the dependency tasks have asynchronous support through one of the methods outlined below.\n\n#### fn\n\nThe function that performs the task's operations. Generally this takes the form of `gulp.src().pipe(someplugin())`.\n\n#### Async task support\n\nTasks can be made asynchronous if its `fn` does one of the following:\n\n##### Accept a callback\n\n```javascript\ngulp.task('somename', function(cb) {\n  // Do stuff\n  cb(err);\n});\n```\n\n##### Return a stream\n\n```javascript\ngulp.task('somename', function() {\n  var stream = gulp.src('./client/**/*.js')\n    .pipe(minify())\n    .pipe(gulp.dest('/build');\n  return stream;\n});\n```\n\n##### Return a promise\n\n```javascript\nvar Q = require('q');\n\ngulp.task('somename', function() {\n  var deferred = Q.defer();\n\n  // Do async stuff\n  setTimeout(function() {\n    deferred.resolve();\n  }, 1);\n\n  return deferred.promise;\n});\n```\n\n### gulp.run(tasks...[, cb])\n\n#### tasks\nType: `String`\n\nTasks to be executed. You may pass any number of tasks as individual arguments. **Note:** Tasks are run concurrently and therefore do not run in order, see [Orchestrator] for more information.\n\n```javascript\ngulp.run('scripts', 'copyfiles', 'builddocs');\n```\n\n```javascript\ngulp.run('scripts', 'copyfiles', 'builddocs', function(err) {\n  // All done or aborted due to err\n});\n```\n\nUse `gulp.run` to run tasks from other tasks. You will probably use this in your default task and to group small tasks into larger tasks.\n\n### gulp.watch(glob [, opts], cb)\n\n#### glob\nType: `String` or `Array`\n\nA single glob or array of globs that indicate which files to watch for changes.\n\n#### opts\nType: `Object`\n\nOptions, that are passed to [`gaze`](https://github.com/shama/gaze).\n\n#### cb(event)\nType: `Function`\n\nCallback to be called on each change.\n\n```javascript\ngulp.watch('js/**/*.js', function(event) {\n  console.log('File '+event.path+' was '+event.type+', running tasks...');\n  gulp.run('scripts', 'copyfiles');\n});\n```\n\nThe callback will be passed an object, `event`, that describes the change:\n\n##### event.type\nType: `String`\n\nThe type of change that occurred, either `added`, `changed` or `deleted`.\n\n##### event.path\nType: `String`\n\nThe path to the file that triggered the event.\n\n\n### gulp.env\n\n`gulp.env` is a [node-optimist] arguments object. For instance, if you run:\n\n```\ngulp test dostuff --production\n```\n\nWhich results in the following `gulp.env`:\n\n```\n{\n  _: ['test', 'dostuff'],\n  production: true\n}\n```\n\nYou can use this to conditionally enable certain plugins:\n\n```\ngulp.task('scripts', function() {\n  var stream = gulp.src(['client/js/**/*.js', '!client/js/vendor/**']);\n\n  // Only uglify in production\n  if (gulp.env.production) {\n    stream = stream.pipe(uglify());\n  }\n\n  stream.pipe(gulp.dest('build/js'));\n});\n```\n\n**Note:** Plugins should not perform differently based on `gulp.env`.\n\n\n## gulp CLI\n\n### Tasks\n\nTasks can be executed by running `gulp <task> <othertask>`. Just running `gulp` will execute the task you registered called `default`. If there is no `default` task gulp will error.\n\n### Compilers\n\nYou can use any language you want for your gulpfile. You will have to specify the language module name so the CLI can load it (and its associated extensions) before attempting to find your gulpfile. Make sure you have this module installed accessible by the folder you are running the CLI in.\n\nExample:\n\n```\ngulp dosomething --require coffee-script\n```\n\n\n## Write your own gulp plugins\n\nSee the [Writing a gulp plugin] wiki page for guidelines and an example to get you started.\n\n\n## More information\n\nSee [the wiki][wiki] for more information and [the FAQ][FAQ] for more answers to common questions.\n\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Fractal <contact@wearefractal.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/wearefractal/gulp/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n\n[node-optimist]: https://github.com/substack/node-optimist\n[node-glob documentation]: https://github.com/isaacs/node-glob#options\n[node-glob]: https://github.com/isaacs/node-glob\n[glob-stream]: https://github.com/wearefractal/glob-stream\n[Orchestrator]: https://github.com/robrich/orchestrator\n[plugin search]: https://npmjs.org/browse/keyword/gulpplugin\n[wiki]: https://github.com/wearefractal/gulp/wiki\n[FAQ]: https://github.com/wearefractal/gulp/wiki/FAQ\n[Writing a gulp plugin]: https://github.com/wearefractal/gulp/wiki/Writing-a-gulp-plugin\n[gulp init]: https://github.com/wearefractal/gulp/wiki/gulp-init\n\n[npm-url]: https://npmjs.org/package/gulp\n[npm-image]: https://badge.fury.io/js/gulp.png\n[travis-url]: https://travis-ci.org/gulpjs/gulp\n[travis-image]: https://travis-ci.org/gulpjs/gulp.png?branch=master\n[depstat-url]: https://david-dm.org/gulpjs/gulp\n[depstat-image]: https://david-dm.org/gulpjs/gulp.png\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wearefractal/gulp/issues"
  },
  "_id": "gulp@3.2.4",
  "_from": "gulp@~3.2.4"
}
